#Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков. Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
# ● выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
# ● написать 3 варианта кода (один у вас уже есть);
# ● проанализировать 3 варианта и выбрать оптимальный;
# ● результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом. Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
# ● написать общий вывод: какой из трёх вариантов лучше и почему.
# Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной, а проявили творчество, фантазию и создали универсальный код для замера памяти.

# Выполнял на 64-разрядной Win 10
# Python 3.7.4 [MSC v.1916 64 bit (AMD64)] on win32

# В качестве подопытной задачки взял 1ое задание 1ого урока.
# Оно простое и за его провал мне стыдно - я решил переделать (или испортить все окончательно).

import sys


def calc_memory(lst):
    memory = 0
    for var in lst:
        print(f'#################\nПеременная: {var}\nВес переменной: ', sys.getsizeof(var))
        eggs = sys.getsizeof(var)
        if hasattr(var, '__iter__') and not isinstance(var, str):
            if hasattr(var, 'keys'):
                for key, value in var.items():
                    print(f'\n ключ: \'{key}\'\n значение: {value}')
                    eggs += calc_memory([key]) + calc_memory([value])
            else:
                eggs += calc_memory(var)
        memory += eggs
    return memory


#Решение 1.
# Затраты памяти программы: 112
# Переменные:  [123, 3, 2, 1]

# x = int(input('Добрый день, введите любое трехзначное число число: '))
# x1 = x // 100
# x2 = (x // 10) % 10
# x3 = x % 10
#
# print(f'Сумма цифр в числе: {x1+x2+x3}\nПроизведение цифр в числе:{x1*x2*x3}')


#Решение 2.
# Затраты памяти программы: 84
# Переменные:  [6, 6, 123]

# x = int(input('Добрый день, введите любое трехзначное число число: '))
# summ = (x // 100) + ((x // 10) % 10) + (x % 10)
# pon = (x // 100) * ((x // 10) % 10) * (x % 10)
# print(f'Сумма цифр в числе: {summ}')
# print(f'Произведение цифр в числе: {pon}')


#Решение 3. Я помню, что решения в стиле "Мистер однострочник" - это отличный способ получить двойку, но я решил рискнуть во имя науки.
# Затраты памяти программы: 28
# Переменные:  [6, 6, 123]

# x = int(input('Добрый день, введите любое трехзначное число число: '))
# print(f'Сумма цифр в числе: {(x // 100) + ((x // 10) % 10) + (x % 10)}\nПроизведение цифр в числе:{(x // 100) * ((x // 10) % 10) * (x % 10)}')


#Решение 4. Трех вариантов вроде как достаточно, но мне было интересно.
# Затраты памяти программы: 188
# Переменные:  ['123', 1, 2, 3, 123]

x = str(input('Добрый день, введите любое трехзначное число число: '))
a = str(x)
x1 = int(a[0])
x2 = int(a[1])
x3 = int(a[2])
print(f'Сумма цифр в числе: {x1+x2+x3}\nПроизведение цифр в числе: {x1*x2*x3}')


_spam = []
for i in dir():
    if i[0] != '_' and not hasattr(locals()[i], '__name__'):
        _spam.append(locals()[i])
print('\nЗаданы переменные: ', _spam, '\n')
print('\nПрограммой затрачено памяти: ', calc_memory(_spam))

# Вывод:
# Наиболее затратным получилось решение 4, наименее затратным - решение 3.
# Несмотря на наименьшие затраты, решение 3, на мой взгляд, не самое правильное и прибегать к нему не стоит - в погоне за сокращением строчек кода теряется его читабельность и уважение коллег по цеху.
# Вместе с тем, лишние переменные хоть и добавляют наглядности решению, но занимают больше памяти, что на более сложных задачах может привести к ряду проблем.
# Получается, что наиболее компромиссным выбором между читабельностью кода и затратами памяти будет решение №2.

